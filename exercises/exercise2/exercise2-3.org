#+STARTUP: indent
* Exercise2.53
#+begin_src racket
#lang scheme
(list 'a 'b 'c)
;; (a b c)
(list (list 'george))
;; ((george))
(cdr '((x1 x2)))
;; ()
(cadr '((x1 x2) (y1 y2)))
;; (y1 y2)
(pair? (car '(a short list)))
;; #f
(memq 'red '((red shoes) (blue socks)))
;; #f
(memq 'red '(red shoes blue socks))
;; (red shoes blue socks)
#+end_src

* Exercise2.54
#+begin_src racket
#lang scheme
(define (equal? list1 list2)
  (if (and (null? list1) (null? list2))
      #t
      (and (eq? (car list1) (car list2)) (equal? (cdr list1) (cdr list2)))))
(equal? '(this is a list) '(this is a list))
;; #t
(equal? '(this is a list) '(this (is a) list))
;; #f
#+end_src

* Exercise2.55
#+begin_src racket
#lang scheme
(car ''abracadabra)
;; quote
#+end_src
Because 'abracadabra == (quote abracadabra)
        (car '(quote abracadabra)) == quote

* Exercise2.56
#+begin_src racket
#lang scheme
(define
  (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var)
             1
             0))
        ((sum? exp)
         (make-sum
          (deriv (addend exp) var)
          (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (make-product
           (exponent exp)
           (make-exponentiation (base exp) (make-sum (exponent exp) -1)))
          (deriv (base exp) var)))
        (else
         (error
          "unknown expression type: DERIV"
          exp))))
(define (=number? exp num) (and (number? exp) (= exp num))) 
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define
  (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        (else (list '** b e))))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s)
  (cond ((null? (cdddr s)) (caddr s))
        (else (cons '+ (cddr s)))))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (cond ((null? (cdddr p)) (caddr p))
        (else (cons '* (cddr p)))))
(define (exponentiation? x) (and (pair? x) (eq? (car x) '**)))
(define (base s) (cadr s))
(define (exponent s) (caddr s))
(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)
(deriv '(** x 2) 'x)
(deriv '(* (** x 3) y z) 'x)
#+end_src

* Exercise2.58
a. fully parenthesized
#+begin_src racket
#lang scheme
(define
  (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var)
             1
             0))
        ((sum? exp)
         (make-sum
          (deriv (addend exp) var)
          (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        (else
         (error
          "unknown expression type: DERIV"
          exp))))
(define (=number? exp num) (and (number? exp) (= exp num))) 
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define
  (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (caddr s))
(define (product? x) (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))
(deriv '(x + (3 * (x + (y + 2)))) 'x)
#+end_src
b. drops unnecessary parentheses
#+begin_src racket
#lang scheme
(define
  (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var)
             1
             0))
        ((sum? exp)
         (make-sum
          (deriv (addend exp) var)
          (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product
           (multiplier exp)
           (deriv (multiplicand exp) var))
          (make-product
           (deriv (multiplier exp) var)
           (multiplicand exp))))
        (else
         (error
          "unknown expression type: DERIV"
          exp))))
(define (=number? exp num) (and (number? exp) (= exp num))) 
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define
  (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
         (else (list a1 '+ a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (caddr s))
(define (wrap-augend s)
  (cond ((null? (cdddr s)) (caddr s))
        (else (cddr s))))
(define (product? x) (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p) (caddr p))
(define (wrap-multiplicand p)
  (cond ((and (null? (cdddr p)) (not (pair? (caddr p)))) (caddr p))
        (else (cddr p))))
(define (wrap exp)
  (cond ((null? exp) '())
        ((number? exp) exp)
        ((variable? exp) exp)
        ((sum? exp) (make-sum (addend exp) (wrap (wrap-augend exp))))
        ((product? exp)
         (cond ((sum? (wrap-multiplicand exp)) (make-sum (make-product (multiplier exp) (wrap (addend (wrap-multiplicand exp)))) (wrap (wrap-augend (wrap-multiplicand exp)))))
               ;; ((pair? (car (wrap-multiplicand exp))) (make-product (multiplier exp) (wrap (car (wrap-multiplicand exp)))))
               (else (make-product (multiplier exp) (wrap (wrap-multiplicand exp))))))))
        
;;(define (wrap exp)
;;  ((cond ((sum? exp) ()))))
;; (deriv '(x + 3 * (x + y + 2) + 3 * x) 'x)
;; (augend '(x + 3 * (x + y + 2) + 3 * x))
(define exp1 '(x + 3 * x * 2))
(define exp2 '(3 * x + 3 * x + 3 * (x + y + x) + 2))
(deriv (wrap exp2) 'x)
;; 12
(deriv (wrap exp1) 'x)
;; 7
#+end_src

* Exercise2.59
**No Duplicates in Set**
#+begin_src racket
#lang scheme
(define (element-of-set? x set) (cond ((null? set) false) ((equal? x (car set)) true) (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set) (if (element-of-set? x set) set (cons x set)))
(define (intersection-set set1 set2) (cond ((or (null? set1) (null? set2)) '()) ((element-of-set? (car set1) set2) (cons (car set1) (intersection-set (cdr set1) set2))) (else (intersection-set (cdr set1) set2))))
(define
  (union-set set1 set2)
  (cond ((and (null? set1) (null? set2))
         '())
        ((null? set1) set2)
        ((not (element-of-set? (car set1) set2))
         (union-set (cdr set1)
                (cons (car set1) set2)))
        (else
         (union-set
          (cdr set1)
          set2))))
(intersection-set '(x y) '(x z))
(union-set '(x y) '(y z asf dasf))
#+end_src

* Exercise2.60
**allow duplicates in set**
#+begin_src racket
#lang scheme
(define (element-of-set? x set) (cond ((null? set) false) ((equal? x (car set)) true) (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set) (cons x set))
(define
  (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2))
         '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-set
                (cdr set1)
                set2)))
        (else
         (intersection-set
          (cdr set1)
          set2))))
(define (union-set set1 set2)
  (cond ((and (null? set1) (null? set2))
         '())
        ((null? set1) set2)
        (else (union-set (cdr set1)
                (cons (car set1) set2)))))
(union-set '(2 3 2 1 3) '(2 3 1))
#+end_src
- element-of-set? is the same as non-duplicate, but it can take
   longer if there are many duplicates
   The number of steps required grows as \(\Theta(n)\).
- adjoin-set only need to add the new item into the set
   The number of steps required grows as \(\Theta(1)\).
- intersection-set will take longer
   The number of steps required grows as \(\Theta(n^2)\).
- union-set do not need to check duplicates
   The number of steps required grows as \(\Theta(n)\).

I will use this representation if I need to write a lot of items into
the set, and I do not need to worry about duplicates in set.

* Exercise2.61&&2.62
#+begin_src racket
#lang scheme
(define
  (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else
         (element-of-set? x (cdr set)))))
(define
  (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1))
            (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1
                     (intersection-set
                      (cdr set1)
                      (cdr set2))))
              ((< x1 x2)
               (intersection-set
                (cdr set1)
                set2))
              ((< x2 x1)
               (intersection-set
                set1
                (cdr set2)))))))
(define
  (adjoin-set x set)
  (cond ((null? set) (list x))
        ((= x (car set)) (cons x set))
        ((< x (car set)) (cons x set))
        (else
         (cons (car set) (adjoin-set x (cdr set))))))
(adjoin-set 6 '(1 2 3 4 6))
;; (1 2 3 4 6 6)
(define
  (union-set set1 set2)
  (cond ((null? set1)
         set2)
        ((null? set2)
         set1)
        (else
         (let ((x1 (car set1))
               (x2 (car set2)))
           (cond ((= x1 x2)
                  (cons x1
                        (union-set
                         (cdr set1)
                         (cdr set2))))
                 ((< x1 x2)
                  (append (list x1 x2) (union-set (cdr set1) set2)))
                 ((< x2 x1)
                  (append (list x2 x1) (union-set set1 (cdr set2)))))))))
(union-set '(1 3 4 5) '(1 2 3))
;; (1 2 3 3 4 5)
#+end_src

* Exercise2.63&&2.64&&2.65&&2.66
#+begin_src racket
#lang scheme
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right) (list entry left right))
(define tree1 '(7 (3 (1 () ()) (5 () ())) (9 () (11 () ()))))
(define tree2 '(3 (1 () ()) (7 (5 () ()) (9 () (11 () ())))))
(define tree3 '(5 (3 (1 () ()) ()) (9 (7 () ()) (11 () ()))))
(define
  (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else
         (element-of-set? x (cdr set)))))

;; preorder
(define
  (tree->list-1 tree)
  (if (null? tree)
      '()
      (append
       (tree->list-1
        (left-branch tree))
       (cons (entry tree)
             (tree->list-1
              (right-branch tree))))))
;; preorder
(define
  (tree->list-2 tree)
  (define
    (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list
         (left-branch tree)
         (cons (entry tree)
               (copy-to-list
                (right-branch tree)
                result-list)))))
  (copy-to-list tree '()))
;; (tree->list-1 tree1)
;; (tree->list-1 tree2)
;; (tree->list-1 tree3)
(define (list->tree elements) (car (partial-tree elements (length elements))))
(define
  (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree
                                 (cdr non-left-elts)
                                 right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree
                       this-entry
                       left-tree
                       right-tree)
                      remaining-elts)))))))) 
(list->tree '(1 3 5 7 9 11))
(define
  (intersection-list-set set1 set2)
  (cond ((or (null? set1) (null? set2))
         '())
        ((element-of-set? (car set1) set2)
         (cons (car set1)
               (intersection-list-set
                (cdr set1)
                set2)))
        (else
         (intersection-list-set
          (cdr set1)
          set2))))
(define (union-list-set set1 set2)
  (cond ((and (null? set1) (null? set2))
         '())
        ((null? set1) set2)
        (else (union-list-set (cdr set1)
                (cons (car set1) set2)))))
(define (union-set set1 set2)
  (let ((set1-list (tree->list-2 set1))
        (set2-list (tree->list-2 set2)))
    (list->tree (union-list-set set1-list set2-list))))
(define (intersection-set set1 set2)
  (let ((set1-list (tree->list-2 set1))
        (set2-list (tree->list-2 set2)))
    (list->tree (intersection-list-set set1-list set2-list))))
(define tree4 '(7 (3 (1 () ()) (5 () ())) (9 () (11 () ()))))
(define tree5 '(8 (3 (1 () ()) (5 () ())) (9 () (11 () ()))))
(union-set tree4 tree5)
(intersection-set tree4 tree5)
(define (lookup given-key set-of-records)
  (cond ((null? set-of-records) false)
        ((equal? given-key (entry set-of-records)) (entry set-of-records))
        ((< given-key (entry set-of-records)) (lookup given-key
                                                      (left-branch
                                                       set-of-records)))
        ((> given-key (entry set-of-records)) (lookup given-key
                                                      (right-branch
                                                       set-of-records)))))
#+end_src
Exercise2.63
a. Yes, (1 3 5 7 9 11)
b. \(n^2\) for method 1 and \(n\) for method 2, method 2 grows more slowly
Exercise2.64
a. devide the list into two parts, for the first half, produce a left
tree, for the remain part, use (car remain) as entry and use (cdr
remain) to produce the right half
b. O(n)

* Exercise2.67&&2.68&&2.69&&2.70
#+begin_src racket
#lang scheme
(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? object) (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define
  (make-code-tree left right)
  (list
   left
   right
   (append
    (symbols left)
    (symbols right))
   (+
    (weight left)
    (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define
  (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define
  (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define
  (decode bits tree)
  (define
    (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch (choose-branch
                            (car bits)
                            current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1
               (cdr bits)
               next-branch)))))
  (decode-1 bits tree))
(define
  (choose-branch bit branch)
  (cond ((= bit 0)
         (left-branch branch))
        ((= bit 1)
         (right-branch branch))
        (else
         (error
          "bad bit: CHOOSE-BRANCH"
          bit))))
(define
  (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x)
            (weight (car set)))
         (cons x set))
        (else
         (cons (car set)
               (adjoin-set x (cdr set))))))
(define
  (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set
         (make-leaf
          (car pair)
          ; symbol
          (cadr pair))
         ; frequency
         (make-leaf-set (cdr pairs))))))
(make-leaf-set '((A 4) (B 2) (C 1) (D 1)))
;; ((leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4))
(define
  sample-tree
  (make-code-tree
   (make-leaf 'A 4)
   (make-code-tree
    (make-leaf 'B 2)
    (make-code-tree
     (make-leaf 'D 1)
     (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(decode sample-message sample-tree)
;; (A D A B B C A)
sample-tree
;; ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)
(define
  (encode message tree)
  (if (null? message)
      '()
      (append
       (encode-symbol
        (car message)
        tree)
       (encode (cdr message) tree))))
(define (element-of-set? x set) (cond ((null? set) false) ((equal? x (car set)) true) (else (element-of-set? x (cdr set)))))
(define (encode-symbol x tree)
  (cond ((not (element-of-set? x (symbols tree))) (error "bad symbol:"
                                                         x "not in tree"))
        ((equal? x (symbol-leaf (left-branch tree))) '(0))
        ((equal? x (symbol-leaf (right-branch tree))) '(1))
        ((element-of-set? x (symbols (right-branch tree))) (append
                                                            '(1)
                                                            (encode-symbol
                                                             x
                                                             (right-branch
                                                              tree))))
        ((element-of-set? x (symbols (left-branch tree))) (append '(0)
                                                                  (encode-symbol
                                                                   x
                                                                   (left-branch
                                                                    tree))))))
;; (encode-symbol 'D sample-tree)
;; (encode '(A D A B B C A) sample-tree)
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge leaf-pairs)
  (cond ((null? (cdr leaf-pairs)) leaf-pairs)
        ((null? (cddr leaf-pairs)) (make-code-tree (car leaf-pairs)
                                                   (cadr leaf-pairs)))
        (else (successive-merge (adjoin-set (make-code-tree (car
                                                             leaf-pairs)
                                                            (cadr
                                                             leaf-pairs))
                                            (cddr leaf-pairs))))))
;; (generate-huffman-tree '((A 4) (B 2) (C 1) (D 1)))
;; ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)
(length (encode '(Get a job Sha na na na na na na na na Get a job Sha na na na
na na na na na Wah yip yip yip yip yip yip yip yip yip Sha boom)
(generate-huffman-tree '((na 16) (yip 9) (Sha 3) (a 2) (job 2) (Get 2) (Wah 1) (boom 1)))))
;; 84
(define code-tree (generate-huffman-tree '((na 16) (yip 9) (Sha 3) (a
                                                                    2)
                                                   (job 2) (Get 2)
                                                   (Wah 1) (boom 1))))

;; code-tree
(encode-symbol 'na code-tree) 
(encode-symbol 'yip code-tree)
(encode-symbol 'Sha code-tree)
(encode-symbol 'a code-tree)
(encode-symbol 'job code-tree)
(encode-symbol 'Get code-tree)
(encode-symbol 'Wah code-tree)
(encode-symbol 'boom code-tree)
;; (0)
;; (1 0)
;; (1 1 1 0)
;; (1 1 0 0)
;; (1 1 1 1 1)
;; (1 1 1 1 0)
;; (1 1 0 1 1)
;; (1 1 0 1 0)
(define tree-5 (generate-huffman-tree '((A 1) (B 2) (C 4) (D 8) (E 16))))
(define tree-10 (generate-huffman-tree '((A 1) (B 2) (C 4) (D 8)
                                               (E 16) (F 32) (G 64) (H 128) (I 256) (J 512))))
(define tree-8 (generate-huffman-tree '((A 1) (B 2) (C 4) (D 8)
                                               (E 16) (F 32) (G 64) (H 128))))
tree-5
tree-10

#+end_src
huffman-encode: 84

fixed-length: (* 3 (+ 2 2 3 1 1 2 16 9)) = 108

Exercise2.71

the most frequent symbol 1 bit

the least frequent symbol 4 bits

the most frequent symbol 1 bit

the least frequent symbol 9 bits

Exercise2.72

the most frequent symbol \(O(1)\)

the least frequent symbol \(O(n)\)
